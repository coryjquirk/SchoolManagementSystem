package jpa.service;
import jpa.dao.StudentDAO;
import jpa.entitymodels.Course;
import jpa.entitymodels.Student;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.query.Query;

import javax.persistence.TypedQuery;
import java.util.List;

public class StudentService implements StudentDAO{
    //implements jpa.dao.StudentDAO
    //will be used to interact with Students DB table

    //getAllStudents input None returns List<Student>
    //-This method reads the student table in your database
    //and returns the data as a List<Student>
    @Override
    public List<Student> getAllStudents(){
        SessionFactory factory = new Configuration().configure().buildSessionFactory();
        Session session = factory.openSession();
        String hql = "From Student";
        Query query = session.createQuery(hql);
        query.getResultList();
        List<Student> students = query.getResultList();

        factory.close();
        session.close();

        return students;
    }

    @Override
    public Student getStudentByEmail(String sEmail){
        //getStudentByEmail input String sEmail returns Student
        //–This method takes a Student’s email as a String and
        //parses the student list for a Student with that email and
        //returns a Student Object.
        SessionFactory factory = new Configuration().configure().buildSessionFactory();
        Session session = factory.openSession();

        Student student = session.get(Student.class, sEmail); //get student by email

        factory.close();
        session.close();

        return student;
    }

    //validateStudent input String sEmail, String sPassword returns boolean
    @Override
    public Boolean validateStudent(String sEmail, String sPassword){
        //–This method takes two parameters: the first one is the
        //user email and the second one is the password from
        //the user input. Return whether or not a student was
        //found.
        SessionFactory factory = new Configuration().configure().buildSessionFactory();
        Session session = factory.openSession();

        TypedQuery typedQuery = session.getNamedQuery("validatestudent");
        typedQuery.setParameter("email", sEmail);
        typedQuery.setParameter("password",sPassword);
        List<Student> students = typedQuery.getResultList();
        if (students.size() > 0)
        {
            return true;
        }

        factory.close();
        session.close();
        return false;
    }

    //registerStudentToCourse input String sEmail, int cId returns void

    @Override
    public void registerStudentToCourse(String sEmail, int cId){
        // –After a successful student
        //validation, this method takes a Student’s email and a
        //Course ID. It checks in the join table (i.e.
        //Student_Course) generated by JPA to find if a Student
        //with that Email is currently attending a Course with that
        //ID.
        //If the Student is not attending that Course, register the
        //student to that course; otherwise not.
        SessionFactory factory = new Configuration().configure().buildSessionFactory();
        Session session = factory.openSession();
        Transaction transaction = session.beginTransaction();

        Student student = session.get(Student.class, sEmail);
        List<Course> courses = student.getCourses();
        Course course = session.get(Course.class, cId);
        if (course == null) {
            System.out.println("Course does not exist");
        } else {
            courses.add(course);
            student.setCourses(courses);
        }

        transaction.commit();
        factory.close();
        session.close();
    }

    //getStudentCourses input String sEmail returns List<Course>
    @Override
    public List<Course> getStudentCourses(String sEmail){
        //–This method takes a Student’s Email as a parameter
        //and would find all the courses a student is registered.
        SessionFactory factory = new Configuration().configure().buildSessionFactory();
        Session session = factory.openSession();

        Student student = session.get(Student.class, sEmail);
        List<Course> courses = student.getCourses();

        factory.close();
        session.close();
        return courses;
    }
}
